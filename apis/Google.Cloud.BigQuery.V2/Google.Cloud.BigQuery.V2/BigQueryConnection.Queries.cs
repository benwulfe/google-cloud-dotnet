// Copyright 2017 Google Inc. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Threading;
using System.Threading.Tasks;

namespace Google.Cloud.BigQuery.V2
{
	//THIS CODE TO BE AUTOGENERATED
	// EXAMPLE OF COMMAND ORIENTED CODE.
	// BigQueryCommand has knowledge only of return type BigQueryJob and is fed a Func<Task<Job>>
	// via generated overloaded options.

    /// <summary>
    /// </summary>
    public sealed partial class BigQueryConnection
    {
        internal static BigQueryCommand CreateExecuteQueryCommand(BigQueryConnection connection,
            string sql,
            QueryOptions queryOptions,
            GetQueryResultsOptions resultsOptions) => new BigQueryCommand
        {
            CommandOptions = new SqlCommandOptions
            {
                BigQueryConnection = connection,
                Sql = sql,
                QueryOptions = queryOptions,
                GetQueryResultsOptions = resultsOptions
            },
            BigQueryCommandType = BigQueryCommandType.Sql
        };
    }

    /// <summary>
    /// </summary>
    public class SqlCommandOptions : BigQueryCommandOptions
    {
        /// <summary>
        /// </summary>
        public QueryOptions QueryOptions { get; set; }

        /// <summary>
        /// </summary>
        internal string Sql
        {
            get => CommandText;
            set => CommandText = value;
        }

        internal override Func<BigQueryCommand, CancellationToken, Task<BigQueryJob>> CreateBigQueryJobFunc { get; } = (x, t) =>
        {
            if (x.BigQueryConnection == null)
            {
                throw new InvalidOperationException(
                    $"To perform this command, you must set {nameof(SqlCommandOptions.BigQueryConnection)}");
            }
            var sqlOptions = x.CommandOptions?.As<SqlCommandOptions>();
            return x.BigQueryConnection.GetOpenedBigQueryClient()
                .CreateQueryJobAsync(x, sqlOptions?.QueryOptions, t);
        };
    }
}
